#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Test Script para Motores de Auditor√≠a con Estructura NoSQL
Valida que los engines funcionen con los modelos RIPS oficiales embebidos
"""

import os
import sys
import django
from datetime import datetime
from decimal import Decimal

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()

# Importar modelos y engines
from apps.radicacion.models_rips_oficial import RIPSTransaccionOficial
from apps.radicacion.engine_preauditoria import EnginePreAuditoria
from apps.radicacion.engine_asignacion import EngineAsignacionEquitativa

def test_engine_preauditoria_with_real_data():
    """
    Testa el engine de pre-auditor√≠a con datos reales del hito
    """
    print("üîç TESTING ENGINE PRE-AUDITOR√çA CON DATOS REALES NoSQL")
    print("=" * 60)
    
    try:
        # Buscar transacci√≥n del hito FE470638
        transacciones = RIPSTransaccionOficial.objects.filter(
            numFactura__icontains="FE470638"
        ).order_by('-fechaRadicacion')[:1]
        
        if not transacciones:
            print("‚ùå No se encontraron transacciones con numFactura FE470638")
            print("üìä Buscando cualquier transacci√≥n disponible...")
            
            transacciones = RIPSTransaccionOficial.objects.all().order_by('-fechaRadicacion')[:1]
            
        if not transacciones:
            print("‚ùå No hay transacciones RIPS en la base de datos")
            return False
            
        transaccion = transacciones[0]
        
        print(f"‚úÖ Transacci√≥n encontrada:")
        print(f"   ‚Ä¢ ID: {transaccion.id}")
        print(f"   ‚Ä¢ Factura: {transaccion.numFactura}")
        print(f"   ‚Ä¢ Prestador NIT: {transaccion.prestadorNit}")
        print(f"   ‚Ä¢ Usuarios embebidos: {len(transaccion.usuarios) if transaccion.usuarios else 0}")
        print(f"   ‚Ä¢ Fecha radicaci√≥n: {transaccion.fechaRadicacion}")
        print()
        
        # Inicializar engine
        engine = EnginePreAuditoria()
        
        print("üöÄ Ejecutando procesamiento completo de pre-auditor√≠a...")
        resultado = engine.procesar_transaccion_completa(
            transaccion_id=str(transaccion.id),
            usuario_revisor='SISTEMA_TEST'
        )
        
        print("\nüìã RESULTADO DEL PROCESAMIENTO:")
        print(f"   ‚Ä¢ Fase actual: {resultado.get('fase_actual')}")
        print(f"   ‚Ä¢ Pre-devoluciones: {resultado['resumen']['total_pre_devoluciones']}")
        print(f"   ‚Ä¢ Valor total pre-devoluciones: ${resultado['resumen']['valor_total_pre_devoluciones']:,.2f}")
        print(f"   ‚Ä¢ Pre-glosas: {resultado['resumen']['total_pre_glosas']}")
        print(f"   ‚Ä¢ Valor total pre-glosas: ${resultado['resumen']['valor_total_pre_glosas']:,.2f}")
        print(f"   ‚Ä¢ Estado siguiente: {resultado['resumen']['estado_siguiente']}")
        
        if resultado.get('error'):
            print(f"‚ùå Error en procesamiento: {resultado['error']}")
            return False
        
        # Mostrar detalles de pre-devoluciones
        if resultado['pre_devoluciones']:
            print(f"\nüìÑ DETALLE PRE-DEVOLUCIONES ({len(resultado['pre_devoluciones'])}):")
            for i, pre_dev in enumerate(resultado['pre_devoluciones'], 1):
                print(f"   {i}. {pre_dev['codigo_causal']}: {pre_dev['descripcion_causal']}")
                print(f"      Valor afectado: ${pre_dev['valor_afectado']:,.2f}")
                print()
        
        # Mostrar detalles de pre-glosas
        if resultado['pre_glosas']:
            print(f"\nüîç DETALLE PRE-GLOSAS ({len(resultado['pre_glosas'])}):")
            for i, pre_glosa in enumerate(resultado['pre_glosas'], 1):
                print(f"   {i}. {pre_glosa['codigo_glosa']}: {pre_glosa['categoria_glosa']}")
                print(f"      Descripci√≥n: {pre_glosa['descripcion_hallazgo']}")
                print(f"      Valor sugerido: ${pre_glosa['valor_glosado_sugerido']:,.2f}")
                print(f"      Prioridad: {pre_glosa['prioridad_revision']}")
                print()
        
        print("‚úÖ Engine Pre-Auditor√≠a funcionando correctamente con estructura NoSQL")
        return True
        
    except Exception as e:
        print(f"‚ùå ERROR en engine pre-auditor√≠a: {str(e)}")
        import traceback
        print(f"üìã Traceback: {traceback.format_exc()}")
        return False

def test_engine_asignacion_equitativa():
    """
    Testa el engine de asignaci√≥n equitativa con pre-glosas reales
    """
    print("\nüéØ TESTING ENGINE ASIGNACI√ìN EQUITATIVA")
    print("=" * 60)
    
    try:
        from apps.radicacion.models_auditoria import PreGlosa
        
        # Buscar pre-glosas pendientes
        pre_glosas_pendientes = PreGlosa.objects.filter(
            estado='PENDIENTE_AUDITORIA'
        ).order_by('-fecha_generacion')[:5]  # Tomar m√°ximo 5 para prueba
        
        if not pre_glosas_pendientes:
            print("‚ö†Ô∏è  No hay pre-glosas pendientes en el sistema")
            print("‚ÑπÔ∏è  El engine est√° listo pero no hay datos para procesar")
            return True
        
        print(f"‚úÖ Pre-glosas pendientes encontradas: {len(pre_glosas_pendientes)}")
        
        pre_glosas_ids = [str(pg.id) for pg in pre_glosas_pendientes]
        
        # Mostrar pre-glosas encontradas
        for i, pg in enumerate(pre_glosas_pendientes, 1):
            print(f"   {i}. {pg.codigo_glosa} - {pg.categoria_glosa}")
            print(f"      Valor: ${pg.valor_glosado_sugerido:,.2f}")
        
        print(f"\nüöÄ Ejecutando asignaci√≥n equitativa...")
        
        # Inicializar engine
        engine = EngineAsignacionEquitativa()
        
        resultado = engine.asignar_pre_glosas_automaticamente(
            pre_glosas_ids=pre_glosas_ids,
            forzar_reasignacion=False
        )
        
        print(f"\nüìã RESULTADO DE LA ASIGNACI√ìN:")
        print(f"   ‚Ä¢ √âxito: {resultado.get('exito', False)}")
        print(f"   ‚Ä¢ Total pre-glosas procesadas: {resultado.get('total_pre_glosas', 0)}")
        print(f"   ‚Ä¢ Asignaciones creadas: {len(resultado.get('asignaciones_creadas', []))}")
        print(f"   ‚Ä¢ Auditores asignados: {len(resultado.get('auditores_asignados', {}))}")
        print(f"   ‚Ä¢ Valor total asignado: ${resultado['estadisticas']['valor_total_asignado']:,.2f}")
        
        # Mostrar criterios aplicados
        if resultado.get('criterios_aplicados'):
            print(f"\nüìä CRITERIOS APLICADOS:")
            for criterio in resultado['criterios_aplicados']:
                print(f"   ‚Ä¢ {criterio}")
        
        # Mostrar asignaciones por auditor
        if resultado.get('auditores_asignados'):
            print(f"\nüë• ASIGNACIONES POR AUDITOR:")
            for auditor, datos in resultado['auditores_asignados'].items():
                print(f"   ‚Ä¢ {auditor} ({datos['perfil']}):")
                print(f"     Pre-glosas: {datos['total_pre_glosas']}")
                print(f"     Valor total: ${datos['valor_total']:,.2f}")
        
        if resultado.get('error'):
            print(f"‚ùå Error en asignaci√≥n: {resultado['error']}")
            return False
        
        print("‚úÖ Engine Asignaci√≥n Equitativa funcionando correctamente")
        return True
        
    except Exception as e:
        print(f"‚ùå ERROR en engine asignaci√≥n: {str(e)}")
        import traceback
        print(f"üìã Traceback: {traceback.format_exc()}")
        return False

def main():
    """
    Funci√≥n principal de testing
    """
    print("üè• TEST ENGINES AUDITOR√çA - ESTRUCTURA NoSQL OFICIAL")
    print("üéØ Verificando compatibilidad con modelos RIPS embebidos")
    print("üìÖ " + datetime.now().strftime("%d/%m/%Y %H:%M:%S"))
    print("=" * 80)
    
    # Test 1: Engine Pre-auditor√≠a
    test1_ok = test_engine_preauditoria_with_real_data()
    
    # Test 2: Engine Asignaci√≥n
    test2_ok = test_engine_asignacion_equitativa()
    
    # Resumen final
    print("\nüèÜ RESUMEN DE TESTING:")
    print("=" * 40)
    print(f"Engine Pre-auditor√≠a: {'‚úÖ OK' if test1_ok else '‚ùå FAIL'}")
    print(f"Engine Asignaci√≥n:    {'‚úÖ OK' if test2_ok else '‚ùå FAIL'}")
    print()
    
    if test1_ok and test2_ok:
        print("üéâ ¬°TODOS LOS ENGINES FUNCIONAN CORRECTAMENTE CON ESTRUCTURA NoSQL!")
        print("üöÄ Sistema listo para procesar auditor√≠as con datos masivos reales")
    else:
        print("‚ö†Ô∏è  Hay engines que requieren correcciones adicionales")
    
    print()
    print("üìä Estado del sistema:")
    print(f"   ‚Ä¢ Transacciones RIPS: {RIPSTransaccionOficial.objects.count()}")
    print(f"   ‚Ä¢ Total usuarios embebidos: En estructura NoSQL optimizada")
    print("   ‚Ä¢ Engines de auditor√≠a: Adaptados a modelos oficiales")

if __name__ == "__main__":
    main()